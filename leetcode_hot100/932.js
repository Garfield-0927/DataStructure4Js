/**
 * 
根据 逆波兰表示法，求表达式的值。

有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

 

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 

示例 1：

输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
示例 2：

输入：tokens = ["4","13","5","/","+"]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
示例 3：

输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
输出：22
解释：
该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

提示：

1 <= tokens.length <= 104
tokens[i] 要么是一个算符（"+"、"-"、"*" 或 "/"），要么是一个在范围 [-200, 200] 内的整数
 

逆波兰表达式：

逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
逆波兰表达式主要有以下两个优点：

去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/evaluate-reverse-polish-notation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */


// 解题思路：
// 利用栈的思想，没遇到符号 入栈，遇到符号，栈顶两个元素出栈，经过运算把结果入栈
// 最后栈中只剩下一个结果，返回第零项。

/**
 * @param {string[]} tokens
 * @return {number}
 */
var evalRPN = function (tokens) {
  let stack = [];
  for (let i = 0; i < tokens.length; i++) {
    switch (tokens[i]) {
      case '+':
        stack[stack.length - 2] =
          parseInt(stack[stack.length - 2]) + parseInt(stack[stack.length - 1]);
        stack.pop();
        break;
      case '-':
        stack[stack.length - 2] =
          parseInt(stack[stack.length - 2]) - parseInt(stack[stack.length - 1]);
        stack.pop();
        break;
      case '*':
        stack[stack.length - 2] =
          parseInt(stack[stack.length - 2]) * parseInt(stack[stack.length - 1]);
        stack.pop();
        break;
      case '/':
        stack[stack.length - 2] =
          parseInt(stack[stack.length - 2]) /
            parseInt(stack[stack.length - 1]) >
          0
            ? Math.floor(
                parseInt(stack[stack.length - 2]) /
                  parseInt(stack[stack.length - 1])
              )
            : Math.ceil(
                parseInt(stack[stack.length - 2]) /
                  parseInt(stack[stack.length - 1])
              );
        stack.pop();
        break;
      default:
        stack.push(tokens[i]);
        break;
    }
    console.log(stack);
  }
  return stack[0];
};

console.log(
  evalRPN([
    '-8',
    '23',
    '8',
    '-',
    '9',
    '23',
    '-',
    '-',
    '*',
    '33',
    '-8',
    '/',
    '+',
    '38',
    '-14',
    '-',
    '-',
    '-7',
    '32',
    '-19',
    '-',
    '11',
    '+',
    '+',
    '+',
    '14',
    '22',
    '-',
    '-',
    '27',
    '-9',
    '-',
    '+',
    '31',
    '+',
    '-12',
    '-11',
    '-',
    '-',
    '14',
    '+',
    '30',
    '+',
    '37',
    '30',
    '-',
    '+',
    '-9',
    '+',
    '7',
    '-',
    '37',
    '+',
    '-5',
    '13',
    '/',
    '-',
    '19',
    '-2',
    '-19',
    '12',
    '+',
    '-',
    '23',
    '+',
    '-',
    '-19',
    '-',
    '+',
    '6',
    '+',
    '-17',
    '+',
    '17',
    '+',
    '5',
    '36',
    '+',
    '-10',
    '+',
    '+',
    '23',
    '-8',
    '-',
    '-',
    '18',
    '-',
    '31',
    '-16',
    '-',
    '+',
    '34',
    '+',
    '-6',
    '+',
    '24',
    '-',
    '22',
    '-',
    '-8',
    '-',
    '28',
    '+',
    '-12',
    '+',
    '39',
    '28',
    '-7',
    '+',
    '+',
    '-14',
    '5',
    '+',
    '5',
    '+',
    '10',
    '+',
    '+',
    '+',
    '-18',
    '*',
    '10',
    '+',
    '-5',
    '11',
    '-',
    '6',
    '+',
    '-',
    '-12',
    '31',
    '+',
    '+',
    '30',
    '29',
    '-',
    '-',
    '39',
    '+',
    '13',
    '-8',
    '-5',
    '+',
    '-',
    '26',
    '19',
    '-',
    '*',
    '-',
    '10',
    '-',
    '-20',
    '5',
    '+',
    '+',
    '0',
    '-',
    '28',
    '-',
    '19',
    '/',
    '28',
    '+',
    '-18',
    '-',
    '28',
    '20',
    '+',
    '-5',
    '-19',
    '+',
    '+',
    '-',
    '-12',
    '-',
    '3',
    '-',
    '6',
    '-15',
    '+',
    '4',
    '-',
    '-',
    '38',
    '+',
    '-9',
    '-',
    '38',
    '-',
    '12',
    '-20',
    '-',
    '10',
    '5',
    '-15',
    '-',
    '-',
    '-',
    '+',
    '-11',
    '+',
    '5',
    '+',
    '2',
    '-',
    '28',
    '+',
    '-9',
    '-11',
    '-',
    '+',
    '37',
    '-',
    '-17',
    '31',
    '-',
    '2',
    '+',
    '+',
    '-16',
    '-12',
    '-',
    '-',
    '12',
    '+',
    '34',
    '-',
    '15',
    '+',
    '8',
    '+',
    '17',
    '-',
    '2',
    '-',
    '33',
    '+',
    '-5',
    '+',
    '14',
    '+',
    '29',
    '-',
    '33',
    '23',
    '+',
    '26',
    '30',
    '-',
    '+',
    '+',
    '39',
    '+',
    '9',
    '24',
    '-',
    '-',
    '20',
    '15',
    '+',
    '-',
    '24',
    '+',
    '37',
    '-',
    '30',
    '-1',
    '-',
    '+',
    '34',
    '+',
    '-13',
    '-',
    '23',
    '15',
    '-',
    '-',
    '-5',
    '-8',
    '8',
    '30',
    '35',
    '-9',
    '22',
    '+',
    '-',
    '-',
    '36',
    '-1',
    '+',
    '5',
    '-',
    '-',
    '+',
    '25',
    '-',
    '+',
    '27',
    '-',
    '16',
    '+',
    '+',
    '+',
    '39',
    '-',
    '15',
    '-',
    '-3',
    '+',
    '5',
    '-6',
    '-',
    '+',
    '-6',
    '-15',
    '-7',
    '-',
    '+',
    '/',
    '13',
    '-',
    '18',
    '+',
    '4',
    '+',
    '29',
    '+',
    '-17',
    '0',
    '-6',
    '-20',
    '-17',
    '+',
    '12',
    '-',
    '+',
    '-',
    '+',
    '+',
    '-10',
    '22',
    '+',
    '+',
    '-11',
    '-',
    '-2',
    '38',
    '-',
    '-',
    '-6',
    '+',
    '0',
    '-',
    '-10',
    '+',
    '-4',
    '-10',
    '+',
    '-',
    '0',
    '-',
    '31',
    '30',
    '-',
    '37',
    '5',
    '+',
    '+',
    '+',
    '-15',
    '+',
    '38',
    '4',
    '-',
    '-16',
    '-17',
    '+',
    '+',
    '+',
    '38',
    '-',
    '27',
    '-19',
    '/',
    '12',
    '+',
    '/',
  ])
);
